/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient;

namespace AGVSystemCommonNet6.GPMRosMessageNet.SickSafetyscanners
{
    public class ApplicationOutputsMsg : Message
    {
        public const string RosMessageName = "sick_safetyscanners/ApplicationOutputsMsg";

        public bool[] evaluation_path_outputs_eval_out { get; set; }
        public bool[] evaluation_path_outputs_is_safe { get; set; }
        public bool[] evaluation_path_outputs_is_valid { get; set; }
        public ushort[] monitoring_case_number_outputs { get; set; }
        public bool[] monitoring_case_number_outputs_flags { get; set; }
        public byte sleep_mode_output { get; set; }
        public bool sleep_mode_output_valid { get; set; }
        public bool error_flag_contamination_warning { get; set; }
        public bool error_flag_contamination_error { get; set; }
        public bool error_flag_manipulation_error { get; set; }
        public bool error_flag_glare { get; set; }
        public bool error_flag_reference_contour_intruded { get; set; }
        public bool error_flag_critical_error { get; set; }
        public bool error_flags_are_valid { get; set; }
        public short linear_velocity_outputs_velocity_0 { get; set; }
        public bool linear_velocity_outputs_velocity_0_valid { get; set; }
        public bool linear_velocity_outputs_velocity_0_transmitted_safely { get; set; }
        public short linear_velocity_outputs_velocity_1 { get; set; }
        public bool linear_velocity_outputs_velocity_1_valid { get; set; }
        public bool linear_velocity_outputs_velocity_1_transmitted_safely { get; set; }
        public short[] resulting_velocity { get; set; }
        public bool[] resulting_velocity_flags { get; set; }

        public ApplicationOutputsMsg()
        {
            this.evaluation_path_outputs_eval_out = new bool[0];
            this.evaluation_path_outputs_is_safe = new bool[0];
            this.evaluation_path_outputs_is_valid = new bool[0];
            this.monitoring_case_number_outputs = new ushort[0];
            this.monitoring_case_number_outputs_flags = new bool[0];
            this.sleep_mode_output = 0;
            this.sleep_mode_output_valid = false;
            this.error_flag_contamination_warning = false;
            this.error_flag_contamination_error = false;
            this.error_flag_manipulation_error = false;
            this.error_flag_glare = false;
            this.error_flag_reference_contour_intruded = false;
            this.error_flag_critical_error = false;
            this.error_flags_are_valid = false;
            this.linear_velocity_outputs_velocity_0 = 0;
            this.linear_velocity_outputs_velocity_0_valid = false;
            this.linear_velocity_outputs_velocity_0_transmitted_safely = false;
            this.linear_velocity_outputs_velocity_1 = 0;
            this.linear_velocity_outputs_velocity_1_valid = false;
            this.linear_velocity_outputs_velocity_1_transmitted_safely = false;
            this.resulting_velocity = new short[0];
            this.resulting_velocity_flags = new bool[0];
        }

        public ApplicationOutputsMsg(bool[] evaluation_path_outputs_eval_out, bool[] evaluation_path_outputs_is_safe, bool[] evaluation_path_outputs_is_valid, ushort[] monitoring_case_number_outputs, bool[] monitoring_case_number_outputs_flags, byte sleep_mode_output, bool sleep_mode_output_valid, bool error_flag_contamination_warning, bool error_flag_contamination_error, bool error_flag_manipulation_error, bool error_flag_glare, bool error_flag_reference_contour_intruded, bool error_flag_critical_error, bool error_flags_are_valid, short linear_velocity_outputs_velocity_0, bool linear_velocity_outputs_velocity_0_valid, bool linear_velocity_outputs_velocity_0_transmitted_safely, short linear_velocity_outputs_velocity_1, bool linear_velocity_outputs_velocity_1_valid, bool linear_velocity_outputs_velocity_1_transmitted_safely, short[] resulting_velocity, bool[] resulting_velocity_flags)
        {
            this.evaluation_path_outputs_eval_out = evaluation_path_outputs_eval_out;
            this.evaluation_path_outputs_is_safe = evaluation_path_outputs_is_safe;
            this.evaluation_path_outputs_is_valid = evaluation_path_outputs_is_valid;
            this.monitoring_case_number_outputs = monitoring_case_number_outputs;
            this.monitoring_case_number_outputs_flags = monitoring_case_number_outputs_flags;
            this.sleep_mode_output = sleep_mode_output;
            this.sleep_mode_output_valid = sleep_mode_output_valid;
            this.error_flag_contamination_warning = error_flag_contamination_warning;
            this.error_flag_contamination_error = error_flag_contamination_error;
            this.error_flag_manipulation_error = error_flag_manipulation_error;
            this.error_flag_glare = error_flag_glare;
            this.error_flag_reference_contour_intruded = error_flag_reference_contour_intruded;
            this.error_flag_critical_error = error_flag_critical_error;
            this.error_flags_are_valid = error_flags_are_valid;
            this.linear_velocity_outputs_velocity_0 = linear_velocity_outputs_velocity_0;
            this.linear_velocity_outputs_velocity_0_valid = linear_velocity_outputs_velocity_0_valid;
            this.linear_velocity_outputs_velocity_0_transmitted_safely = linear_velocity_outputs_velocity_0_transmitted_safely;
            this.linear_velocity_outputs_velocity_1 = linear_velocity_outputs_velocity_1;
            this.linear_velocity_outputs_velocity_1_valid = linear_velocity_outputs_velocity_1_valid;
            this.linear_velocity_outputs_velocity_1_transmitted_safely = linear_velocity_outputs_velocity_1_transmitted_safely;
            this.resulting_velocity = resulting_velocity;
            this.resulting_velocity_flags = resulting_velocity_flags;
        }
    }
}
